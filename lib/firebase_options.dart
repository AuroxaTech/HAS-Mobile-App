// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyBNU0Gc9Kk3YMaHZwLDSyXGmX0-WAETahk',
    appId: '1:309475321224:web:1446dcb1ff871ee8fe863d',
    messagingSenderId: '826477053206',
    projectId: 'has---real-estate',
    storageBucket: "has---real-estate.appspot.com",
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyBNU0Gc9Kk3YMaHZwLDSyXGmX0-WAETahk',
    appId: '1:826477053206:android:bb8828fb791441f1e23c37',
    messagingSenderId: '826477053206',
    projectId: 'has---real-estate',
    storageBucket: "has---real-estate.appspot.com",
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyCqhkpyTegWcgAkVkR31Ir4SXuQlCW1Ask',
    appId: '1:826477053206:ios:967b73226e8206ace23c37',
    messagingSenderId: '826477053206',
    projectId: 'has---real-estate',
    storageBucket: "has---real-estate.appspot.com",
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyCqhkpyTegWcgAkVkR31Ir4SXuQlCW1Ask',
    appId: '1:826477053206:ios:967b73226e8206ace23c37',
    messagingSenderId: '826477053206',
    projectId: 'has---real-estate',
    storageBucket: "has---real-estate.appspot.com",
  );
}
//import 'dart:io';
// import 'package:app_settings/app_settings.dart';
// import 'package:assigu/constants.dart';
// import 'package:assigu/models/vehicle.dart';
// import 'package:cloud_firestore/cloud_firestore.dart';
// import 'package:firebase_storage/firebase_storage.dart';
// import 'package:flutter/gestures.dart';
// import 'package:flutter/material.dart';
// import 'package:flutter_riverpod/flutter_riverpod.dart';
// import 'package:flutter_gen/gen_l10n/app_localizations.dart';
// import 'package:geolocator/geolocator.dart';
// import 'package:image_picker/image_picker.dart';
// import 'package:path/path.dart';
// import '../models/user.dart';
// import '../providers/claim_provider.dart';
// import '../services/place_service.dart';
// import '../shared/global_variables.dart';
// import '../shared/widgets/form.dart';
// import '../shared/widgets/svg_icon.dart';
// import '../utils/index.dart';
// import 'dashboard/widgets/app_switch.dart';
// class Logbook {
//   final int position;
//   late final bool insured;
//   bool uploaded;
//   final bool logUploaded;
//   final bool certUploaded;
//   final bool idCardUploaded;
//   String? imagePath; // Add this line
//
//
//
//   Logbook({
//     required this.position,
//     this.insured = false,
//     this.uploaded = false,
//     this.logUploaded = false,
//     this.certUploaded = false,
//     this.idCardUploaded = false,
//     this.imagePath
//   });
// }
//
// class Certificate {
//   final int position;
//   late final bool insured;
//   bool uploaded;
//   final bool logUploaded;
//   final bool certUploaded;
//   final bool idCardUploaded;
//   String? imagePath; // Add this line
//
//
//
//   Certificate({
//     required this.position,
//     this.insured = false,
//     this.uploaded = false,
//     this.logUploaded = false,
//     this.certUploaded = false,
//     this.idCardUploaded = false,
//     this.imagePath
//   });
// }
//
// class WitnessDetail {
//   final int position;
//   late final bool insured;
//   bool uploaded;
//   final bool logUploaded;
//   final bool certUploaded;
//   final bool idCardUploaded;
//   String? imagePath; // Add this line
//
//
//
//   WitnessDetail({
//     required this.position,
//     this.insured = false,
//     this.uploaded = false,
//     this.logUploaded = false,
//     this.certUploaded = false,
//     this.idCardUploaded = false,
//     this.imagePath
//   });
// }
//
//
// class NewDriverDetail extends ConsumerStatefulWidget {
//   final Function(UserModal?, String?, List<String>?) onSuccess;
//   final String? docUrl;
//
//   const NewDriverDetail({
//     super.key,
//     required this.onSuccess,
//     required this.docUrl,
//   });
//
//   @override
//   _NewDriverDetailState createState() => _NewDriverDetailState();
// }
//
// class _NewDriverDetailState extends ConsumerState<NewDriverDetail> {
//   List<LicenseModel> licenses = [];
//
//   @override
//   void initState() {
//     super.initState();
//     licenses.add(LicenseModel(position: 1)); // Initialize with one license
//   }
//
//   Future<void> pickImageFromCamera(LicenseModel license) async {
//     final ImagePicker _picker = ImagePicker();
//     final XFile? photo = await _picker.pickImage(source: ImageSource.camera);
//     if (photo != null) {
//       setState(() {
//         license.uploaded = true;
//         license.imagePath = photo.path; // Ensure this is set correctly
//         print("Image picked: ${photo.path}"); // Add this line
//       });
//     }
//   }
//
//   void addNewLicense() {
//     var newLicense = LicenseModel(position: ref.watch(licenseListProvider).length + 1);
//     // Update the provider's state with the new list including the new license
//     ref.read(licenseListProvider.notifier).state = [...ref.read(licenseListProvider), newLicense];
//   }
//
//   Future<void> finalizeSelection(context)async {
//     List<String> imagePathList = [];
//     // Assuming 'licenses' holds your LicenseModel items and each LicenseModel has an 'imagePath' field
//     for (var license in licenses) {
//       if (license.uploaded && license.imagePath != null) {
//         imagePathList.add(license.imagePath!); // Add each image path to the list
//       }
//     }
//     setState(() {
//       selectedDriverLicense = imagePathList;
//     });
//     // Call onSuccess with the list of image paths
//     widget.onSuccess(user, "docUrl", imagePathList);
//
//   }
//   List<String> selectedDriverLicense = [];
//   Future<String?> uploadImageFile(String imagePath) async {
//     try {
//       // Unique file name for the image
//       String fileName = basename(imagePath);
//       // Reference to the Firebase Storage location
//       Reference ref = FirebaseStorage.instance.ref().child('uploads/$fileName');
//       // Upload process
//       UploadTask task = ref.putFile(File(imagePath));
//       // Wait for upload to complete
//       await task.whenComplete(() {});
//       // Get and return the download URL
//       String downloadUrl = await ref.getDownloadURL();
//       return downloadUrl;
//     } catch (e) {
//       print("Error uploading image: $e");
//       return null; // In case of error, return null
//     }
//   }
//   bool isLoading = false;
//   Future<List<String>> uploadImages(List<String> imagePaths) async {
//     List<String> downloadUrls = [];
//
//     for (String imagePath in imagePaths) {
//       String? downloadUrl = await uploadImageFile(imagePath);
//       if (downloadUrl != null) {
//         downloadUrls.add(downloadUrl);
//       }
//     }
//
//     return downloadUrls;
//   }
//
//   Future<void> submitFirestore(context) async {
//     setState(() {
//       isLoading = true;
//     });
//     await finalizeSelection(context);
//
//     // Upload images first and get their URLs
//     List<String> driverLicenseUrls = await uploadImages(selectedDriverLicense);
//
//     // Prepare your driver details data
//     List<Map<String, dynamic>> driverLicenseList = driverLicenseUrls.map((url) {
//       return {
//         "firstname": "",
//         "lastname": "",
//         "gender": "",
//         "driverLicenseNumber" : "",
//         "phoneNumber" : "",
//         // Assuming you want to associate each URL with these details
//       };
//     }).toList();
//     // Prepare your claim data
//     Map<String, dynamic> claimData = {
//       "driverLicenseDetail" : driverLicenseList,
//       'selectedDriverLicense': driverLicenseUrls,
//     };
//
//     try {
//       // Assuming 'user' is a valid object with a 'mobilePhone' field
//       String documentId = user?.mobilePhone.toString() ?? 'defaultId'; // Provide a default ID or handle it differently
//       await FirebaseFirestore.instance.collection('newClaims').doc(documentId).update(claimData);
//       print('Claim submitted successfully: $claimData');
//       setState(() {
//         isLoading = false;
//         Navigator.pop(context);
//       });
//       // Handle successful submission, e.g., show a confirmation message or navigate
//     } catch (e) {
//       print('Error submitting claim: $e');
//       // Handle errors, e.g., show an error message
//     } finally {
//       setState(() {
//         isLoading = false;
//       });
//     }
//   }
//   @override
//   Widget build(BuildContext context) {
//     final locale_ = AppLocalizations.of(context)!;
//     licenses = ref.watch(licenseListProvider).toList();
//
//     return GestureDetector(
//       onTap: () => FocusScope.of(context).unfocus(),
//       child: Container(
//
//         width: MediaQuery.of(context).size.width,
//         padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 30),
//         decoration: BoxDecoration(
//           color: kPrimary,
//           borderRadius: BorderRadius.circular(20),
//         ),
//         child: Column(
//           mainAxisSize: MainAxisSize.min,
//           children: [
//             const Text(
//               'Add Driver License',
//               textAlign: TextAlign.center,
//               style: TextStyle(fontSize: 22, fontWeight: FontWeight.w700),
//             ),
//             const SizedBox(
//               height: 20,
//             ),
//             SingleChildScrollView(
//               child: Column(
//                 children: [
//                   for (var license in licenses)
//                     renderDriverLicense(driver: license),
//                   if (licenses.length < 10) // Limit number of licenses
//                     GestureDetector(
//                       onTap: ref.watch(licenseListProvider).length >= 10
//                           ? null
//                           : () {
//                         // Add new Driver Details
//                         addNewLicense();
//                       },
//                       child: Row(
//                         mainAxisSize: MainAxisSize.max,
//                         mainAxisAlignment: MainAxisAlignment.start,
//                         children: [
//                           Container(
//                             alignment: Alignment.center,
//                             width: 42,
//                             height: 42,
//                             decoration: const BoxDecoration(
//                               shape: BoxShape.circle,
//                               color: Color(0xff38ADB5),
//                             ),
//                             child: const Icon(
//                               Icons.add,
//                               color: Colors.white,
//                               size: 20,
//                             ),
//                           ),
//                           const SizedBox(width: 18),
//                           const Text(
//                             'More',
//                             style: TextStyle(
//                               fontSize: 16,
//                               fontWeight: FontWeight.w400,
//                               color: Colors.black,
//                             ),
//                           ),
//                         ],
//                       ),
//                     )
//
//                 ],
//               ),
//             ),
//             const SizedBox(height: 20),
//             InkWell(
//               onTap: () {
//                 submitFirestore(context);
//               },
//               child: Container(
//                 width: double.infinity,
//                 padding: const EdgeInsets.symmetric(vertical: 20),
//                 decoration: BoxDecoration(
//                   color: kViolet,
//                   borderRadius: BorderRadius.circular(24),
//                 ),
//                 child: isLoading ? const Center(child: CircularProgressIndicator()) : Row(
//                   mainAxisAlignment: MainAxisAlignment.center,
//                   crossAxisAlignment: CrossAxisAlignment.center,
//                   children: [
//                     Text(
//                       locale_.cont,
//                       textAlign: TextAlign.center,
//                       style: const TextStyle(
//                         color: kPrimary,
//                         fontSize: 17,
//                         fontWeight: FontWeight.w600,
//                       ),
//                     ),
//                   ],
//                 ),
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
//
//   Widget renderDriverLicense({required LicenseModel driver}) {
//     final suffix = driverSuffix[driver.position - 1];
//     return Padding(
//       padding: const EdgeInsets.only(bottom: 16),
//       child: Row(
//         mainAxisSize: MainAxisSize.max,
//         mainAxisAlignment: MainAxisAlignment.start,
//         children: [
//           Expanded(
//             child: Row(
//               children: [
//                 GestureDetector(
//                   onTap: () => driver.uploaded ? null : pickImageFromCamera(driver),
//                   child: Container(
//                     alignment: Alignment.center,
//                     width: 42,
//                     height: 42,
//                     decoration: BoxDecoration(
//                       shape: BoxShape.circle,
//                       color: suffix == "A" ? Color(0xff09CB6E)
//                           : Color(0xffFF8A35),
//                     ),
//                     child: Icon(
//                       driver.uploaded || driver.insured
//                           ? Icons.check
//                           : Icons.camera_alt_rounded,
//                       color: Colors.white,
//                       size: 20,
//                     ),
//                   ),
//                 ),
//                 const SizedBox(width: 18),
//                 Text(
//                   'Driver $suffix',
//                   style: const TextStyle(
//                     fontSize: 16,
//                     fontWeight: FontWeight.w600,
//                     color: Colors.black,
//                   ),
//                 ),
//               ],
//             ),
//           ),
//
//           suffix == "A"  ? Row(
//             children: [
//               const Text(
//                 'I am the insured',
//                 style: TextStyle(
//                   fontSize: 10,
//                   fontWeight: FontWeight.w100,
//                   color: Color(0xff09CB6E),
//                 ),
//               ),
//               const SizedBox(
//                 width: 12,
//               ),
//               AppSwitch(
//                 isOn: driver.insured,
//                 customColor: const Color(0xff09CB6E),
//                 onTap: () {
//                   // setState(() {
//                   //   driver.insured = !driver.insured;
//                   // });
//                   final model = LicenseModel(
//                     position: driver.position,
//                     insured: !driver.insured,
//                     certUploaded: driver.certUploaded,
//                     logUploaded: driver.logUploaded,
//                     uploaded: driver.uploaded,
//                     idCardUploaded: driver.idCardUploaded,
//                   );
//
//                   final licenseList = ref
//                       .watch(licenseListProvider)
//                       .where((model) => model.position != driver.position)
//                       .toList();
//                   licenseList.add(model);
//                   licenseList.sort((a, b) => a.position.compareTo(b.position));
//                   ref.read(licenseListProvider.notifier).state = licenseList;
//                 },
//               ),
//             ],
//           ) : SizedBox(),
//         ],
//       ),
//     );
//   }
// }
//
//
// class LogBook extends ConsumerStatefulWidget {
//   final Function(UserModal?, String?, List<String>?) onSuccess;
//   final String? docUrl;
//
//   const LogBook({
//     super.key,
//     required this.onSuccess,
//     required this.docUrl,
//   });
//
//   @override
//   _LogBookState createState() => _LogBookState();
// }
//
// class _LogBookState extends ConsumerState<LogBook> {
//   List<Logbook> licenses = [];
//
//   @override
//   void initState() {
//     super.initState();
//     licenses.add(Logbook(position: 1)); // Initialize with one license
//   }
//
//   Future<void> pickImageFromCamera(Logbook license) async {
//     final ImagePicker _picker = ImagePicker();
//     final XFile? photo = await _picker.pickImage(source: ImageSource.camera);
//     if (photo != null) {
//       setState(() {
//         license.uploaded = true;
//         license.imagePath = photo.path; // Ensure this is set correctly
//         print("Image picked: ${photo.path}"); // Add this line
//       });
//     }
//   }
//
//   void addNewLicense() {
//     var newLicense = Logbook(position: ref.watch(logbookListProvider).length + 1);
//     // Update the provider's state with the new list including the new license
//     ref.read(logbookListProvider.notifier).state = [...ref.read(logbookListProvider), newLicense];
//   }
//   Future<void> finalizeSelection(context)async {
//     List<String> imagePathList = [];
//     // Assuming 'licenses' holds your LicenseModel items and each LicenseModel has an 'imagePath' field
//     for (var license in licenses) {
//       if (license.uploaded && license.imagePath != null) {
//         imagePathList.add(license.imagePath!); // Add each image path to the list
//       }
//     }
//     setState(() {
//       selectedLogbook = imagePathList;
//     });
//     // Call onSuccess with the list of image paths
//     widget.onSuccess(user, "docUrl", imagePathList);
//
//   }
//   List<String> selectedLogbook = [];
//   Future<String?> uploadImageFile(String imagePath) async {
//     try {
//       // Unique file name for the image
//       String fileName = basename(imagePath);
//       // Reference to the Firebase Storage location
//       Reference ref = FirebaseStorage.instance.ref().child('uploads/$fileName');
//       // Upload process
//       UploadTask task = ref.putFile(File(imagePath));
//       // Wait for upload to complete
//       await task.whenComplete(() {});
//       // Get and return the download URL
//       String downloadUrl = await ref.getDownloadURL();
//       return downloadUrl;
//     } catch (e) {
//       print("Error uploading image: $e");
//       return null; // In case of error, return null
//     }
//   }
//   bool isLoading = false;
//   Future<List<String>> uploadImages(List<String> imagePaths) async {
//     List<String> downloadUrls = [];
//
//     for (String imagePath in imagePaths) {
//       String? downloadUrl = await uploadImageFile(imagePath);
//       if (downloadUrl != null) {
//         downloadUrls.add(downloadUrl);
//       }
//     }
//
//     return downloadUrls;
//   }
//
//   Future<void> submitFirestore(context) async {
//     setState(() {
//       isLoading = true;
//     });
//     await finalizeSelection(context);
//
//     // Upload images first and get their URLs
//     List<String> logbookUrls = await uploadImages(selectedLogbook);
//
//     // Prepare your driver details data
//     List<Map<String, dynamic>> logbookDetailsList = logbookUrls.map((url) {
//       return {
//         "firstname": "",
//         "lastname": "",
//         "gender": "",
//         "driverLicenseNumber" : "",
//         "vehicleInformation" : ""
//         // Assuming you want to associate each URL with these details
//       };
//     }).toList();
//     // Prepare your claim data
//     Map<String, dynamic> claimData = {
//       "logbookDetail" : logbookDetailsList,
//       'selectedLogbook': logbookUrls,
//     };
//
//     try {
//       // Assuming 'user' is a valid object with a 'mobilePhone' field
//       String documentId = user?.mobilePhone.toString() ?? 'defaultId'; // Provide a default ID or handle it differently
//       await FirebaseFirestore.instance.collection('newClaims').doc(documentId).update(claimData);
//       print('Claim submitted successfully: $claimData');
//       setState(() {
//         isLoading = false;
//         Navigator.pop(context);
//       });
//       // Handle successful submission, e.g., show a confirmation message or navigate
//     } catch (e) {
//       print('Error submitting claim: $e');
//       // Handle errors, e.g., show an error message
//     } finally {
//       setState(() {
//         isLoading = false;
//       });
//     }
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     final locale_ = AppLocalizations.of(context)!;
//     licenses = ref.watch(logbookListProvider).toList();
//     return GestureDetector(
//       onTap: () => FocusScope.of(context).unfocus(),
//       child: Container(
//         width: MediaQuery.of(context).size.width,
//         padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 30),
//         decoration: BoxDecoration(
//           color: kPrimary,
//           borderRadius: BorderRadius.circular(20),
//         ),
//         child: Column(
//           mainAxisSize: MainAxisSize.min,
//           children: [
//             const Text(
//               'Add Logbook',
//               textAlign: TextAlign.center,
//               style: TextStyle(fontSize: 22, fontWeight: FontWeight.w700),
//             ),
//             const SizedBox(
//               height: 20,
//             ),
//             SingleChildScrollView(
//               child: Column(
//                 children: [
//                   for (var license in licenses)
//                     renderLogbookLicense(driver: license),
//                   if (licenses.length < 10) // Limit number of licenses
//                     GestureDetector(
//                       onTap: ref.watch(logbookListProvider).length >= 10
//                           ? null
//                           : () {
//                         // Add new Driver Details
//                         addNewLicense();
//                       },
//                       child: Row(
//                         mainAxisSize: MainAxisSize.max,
//                         mainAxisAlignment: MainAxisAlignment.start,
//                         children: [
//                           Container(
//                             alignment: Alignment.center,
//                             width: 42,
//                             height: 42,
//                             decoration: const BoxDecoration(
//                               shape: BoxShape.circle,
//                               color: Color(0xff38ADB5),
//                             ),
//                             child: const Icon(
//                               Icons.add,
//                               color: Colors.white,
//                               size: 20,
//                             ),
//                           ),
//                           const SizedBox(width: 18),
//                           const Text(
//                             'More',
//                             style: TextStyle(
//                               fontSize: 16,
//                               fontWeight: FontWeight.w400,
//                               color: Colors.black,
//                             ),
//                           ),
//                         ],
//                       ),
//                     )
//                 ],
//               ),
//             ),
//             const SizedBox(height: 20),
//             InkWell(
//               onTap: () {
//                 submitFirestore(context);
//               },
//               child: Container(
//                 width: double.infinity,
//                 padding: const EdgeInsets.symmetric(vertical: 20),
//                 decoration: BoxDecoration(
//                   color: kViolet,
//                   borderRadius: BorderRadius.circular(24),
//                 ),
//                 child: isLoading ? const Center(child: CircularProgressIndicator()) : Row(
//                   mainAxisAlignment: MainAxisAlignment.center,
//                   crossAxisAlignment: CrossAxisAlignment.center,
//                   children: [
//                     Text(
//                       locale_.cont,
//                       textAlign: TextAlign.center,
//                       style: const TextStyle(
//                         color: kPrimary,
//                         fontSize: 17,
//                         fontWeight: FontWeight.w600,
//                       ),
//                     ),
//                   ],
//                 ),
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
//
//   // Widget renderDriverLicense({required LicenseModel driver}) {
//   //   final suffix = driverSuffix[driver.position - 1];
//   //   return Padding(
//   //     padding: const EdgeInsets.only(bottom: 16),
//   //     child: Row(
//   //       children: [
//   //         Expanded(
//   //           child: Row(
//   //             children: [
//   //               GestureDetector(
//   //                 onTap: () => driver.uploaded ? null : pickImageFromCamera(driver),
//   //                 child: Container(
//   //                   alignment: Alignment.center,
//   //                   width: 42,
//   //                   height: 42,
//   //                   decoration: BoxDecoration(
//   //                     shape: BoxShape.circle,
//   //                     color:
//   //                     suffix == "A" ? Color(0xff09CB6E)
//   //                         : Color(0xffFF8A35),
//   //                   ),
//   //                   child: Icon(
//   //                     driver.uploaded ? Icons.check : Icons.camera_alt_rounded,
//   //                     color: Colors.white,
//   //                     size: 20,
//   //                   ),
//   //                 ),
//   //               ),
//   //               const SizedBox(width: 18),
//   //               Text(
//   //                 'Driver $suffix',
//   //                 style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w600, color: Colors.black),
//   //               ),
//   //             ],
//   //           ),
//   //         ),
//   //       ],
//   //     ),
//   //   );
//   // }
//
//
//   Widget renderLogbookLicense({required Logbook driver}) {
//     final suffix = driverSuffix[driver.position - 1];
//     return Padding(
//       padding: const EdgeInsets.only(bottom: 16),
//       child: Row(
//         mainAxisSize: MainAxisSize.max,
//         mainAxisAlignment: MainAxisAlignment.start,
//         children: [
//           Expanded(
//             child: Row(
//               children: [
//                 GestureDetector(
//                   onTap: () => driver.uploaded ? null : pickImageFromCamera(driver),
//                   child: Container(
//                     alignment: Alignment.center,
//                     width: 42,
//                     height: 42,
//                     decoration: BoxDecoration(
//                       shape: BoxShape.circle,
//                       color: suffix == "A" ? Color(0xff09CB6E)
//                           : Color(0xffFF8A35),
//                     ),
//                     child: Icon(
//                       driver.uploaded || driver.insured
//                           ? Icons.check
//                           : Icons.camera_alt_rounded,
//                       color: Colors.white,
//                       size: 20,
//                     ),
//                   ),
//                 ),
//                 const SizedBox(width: 18),
//                 Text(
//                   'Vehicle $suffix',
//                   style: const TextStyle(
//                     fontSize: 16,
//                     fontWeight: FontWeight.w600,
//                     color: Colors.black,
//                   ),
//                 ),
//               ],
//             ),
//           ),
//
//           suffix == "A"  ? Row(
//             children: [
//               const Text(
//                 'I am the insured',
//                 style: TextStyle(
//                   fontSize: 10,
//                   fontWeight: FontWeight.w100,
//                   color: Color(0xff09CB6E),
//                 ),
//               ),
//               const SizedBox(
//                 width: 12,
//               ),
//               AppSwitch(
//                 isOn: driver.insured,
//                 customColor: const Color(0xff09CB6E),
//                 onTap: () {
//                   // setState(() {
//                   //   driver.insured = !driver.insured;
//                   // });
//                   final model = Logbook(
//                     position: driver.position,
//                     insured: !driver.insured,
//                     certUploaded: driver.certUploaded,
//                     logUploaded: driver.logUploaded,
//                     uploaded: driver.uploaded,
//                     idCardUploaded: driver.idCardUploaded,
//                   );
//
//                   final licenseList = ref
//                       .watch(logbookListProvider)
//                       .where((model) => model.position != driver.position)
//                       .toList();
//                   licenseList.add(model);
//                   licenseList.sort((a, b) => a.position.compareTo(b.position));
//                   ref.read(logbookListProvider.notifier).state = licenseList;
//                 },
//               ),
//             ],
//           ) : SizedBox(),
//         ],
//       ),
//     );
//   }
//
// }
//
//
//
//
// class InsuranceCertificate extends ConsumerStatefulWidget {
//   final  Function(VehicleModal?, String?, List<String>?) onSuccess;
//
//
//   const InsuranceCertificate({
//     super.key,
//     required this.onSuccess,
//   });
//
//   @override
//   _InsuranceCertificateState createState() => _InsuranceCertificateState();
// }
//
// class _InsuranceCertificateState extends ConsumerState<InsuranceCertificate> {
//   List<Certificate> licenses = [];
//
//   @override
//   void initState() {
//     super.initState();
//     licenses.add(Certificate(position: 1)); // Initialize with one license
//   }
//
//   Future<void> pickImageFromCamera(Certificate license) async {
//     final ImagePicker _picker = ImagePicker();
//     final XFile? photo = await _picker.pickImage(source: ImageSource.camera);
//     if (photo != null) {
//       setState(() {
//         license.uploaded = true;
//         license.imagePath = photo.path; // Ensure this is set correctly
//         print("Image picked: ${photo.path}"); // Add this line
//       });
//     }
//   }
//
//   void addNewLicense() {
//     var newLicense = Certificate(position: ref.watch(certificateListProvider).length + 1);
//     // Update the provider's state with the new list including the new license
//     ref.read(certificateListProvider.notifier).state = [...ref.read(certificateListProvider), newLicense];
//   }
//
//   Future<void> finalizeSelection(context)async {
//     List<String> imagePathList = [];
//     // Assuming 'licenses' holds your LicenseModel items and each LicenseModel has an 'imagePath' field
//     for (var license in licenses) {
//       if (license.uploaded && license.imagePath != null) {
//         imagePathList.add(license.imagePath!); // Add each image path to the list
//       }
//     }
//     setState(() {
//       selectedCertificate = imagePathList;
//     });
//     // Call onSuccess with the list of image paths
//     widget.onSuccess(vehicleModal, "docUrl", imagePathList);
//
//   }
//   List<String> selectedCertificate = [];
//   Future<String?> uploadImageFile(String imagePath) async {
//     try {
//       // Unique file name for the image
//       String fileName = basename(imagePath);
//       // Reference to the Firebase Storage location
//       Reference ref = FirebaseStorage.instance.ref().child('uploads/$fileName');
//       // Upload process
//       UploadTask task = ref.putFile(File(imagePath));
//       // Wait for upload to complete
//       await task.whenComplete(() {});
//       // Get and return the download URL
//       String downloadUrl = await ref.getDownloadURL();
//       return downloadUrl;
//     } catch (e) {
//       print("Error uploading image: $e");
//       return null; // In case of error, return null
//     }
//   }
//   bool isLoading = false;
//   Future<List<String>> uploadImages(List<String> imagePaths) async {
//     List<String> downloadUrls = [];
//
//     for (String imagePath in imagePaths) {
//       String? downloadUrl = await uploadImageFile(imagePath);
//       if (downloadUrl != null) {
//         downloadUrls.add(downloadUrl);
//       }
//     }
//
//     return downloadUrls;
//   }
//
//   Future<void> submitFirestore(context) async {
//     setState(() {
//       isLoading = true;
//     });
//     await finalizeSelection(context);
//
//     // Upload images first and get their URLs
//     List<String> insuranceUrls = await uploadImages(selectedCertificate);
//
//     // Prepare your driver details data
//     List<Map<String, dynamic>> certificateDetailsList = insuranceUrls.map((url) {
//       return {
//         "firstname": "",
//         "lastname": "",
//         "gender": "",
//         "driverLicenseNumber" : "",
//         "vehicleInformation" : ""
//         // Assuming you want to associate each URL with these details
//       };
//     }).toList();
//     // Prepare your claim data
//     Map<String, dynamic> claimData = {
//       "certificateDetail" : certificateDetailsList,
//       'selectedInsurance': insuranceUrls,
//     };
//
//     try {
//       // Assuming 'user' is a valid object with a 'mobilePhone' field
//       String documentId = user?.mobilePhone.toString() ?? 'defaultId'; // Provide a default ID or handle it differently
//       await FirebaseFirestore.instance.collection('newClaims').doc(documentId).update(claimData);
//       print('Claim submitted successfully: $claimData');
//       setState(() {
//         isLoading = false;
//         Navigator.pop(context);
//       });
//       // Handle successful submission, e.g., show a confirmation message or navigate
//     } catch (e) {
//       print('Error submitting claim: $e');
//       // Handle errors, e.g., show an error message
//     } finally {
//       setState(() {
//         isLoading = false;
//       });
//     }
//   }
//   @override
//   Widget build(BuildContext context) {
//     final locale_ = AppLocalizations.of(context)!;
//     licenses = ref.watch(certificateListProvider).toList();
//     return GestureDetector(
//       onTap: () => FocusScope.of(context).unfocus(),
//       child: Container(
//         width: MediaQuery.of(context).size.width,
//         padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 30),
//         decoration: BoxDecoration(
//           color: kPrimary,
//           borderRadius: BorderRadius.circular(20),
//         ),
//         child: Column(
//           mainAxisSize: MainAxisSize.min,
//           children: [
//             const Text(
//               'Add Insurance Certificate',
//               textAlign: TextAlign.center,
//               style: TextStyle(fontSize: 22, fontWeight: FontWeight.w700),
//             ),
//             const SizedBox(
//               height: 20,
//             ),
//             SingleChildScrollView(
//               child: Column(
//                 children: [
//                   for (var license in licenses)
//                     renderInsuranceLicense(driver: license),
//                   if (licenses.length < 10) // Limit number of licenses
//                     GestureDetector(
//                       onTap: ref.watch(certificateListProvider).length >= 10
//                           ? null
//                           : () {
//                         // Add new Driver Details
//                         addNewLicense();
//                       },
//                       child: Row(
//                         mainAxisSize: MainAxisSize.max,
//                         mainAxisAlignment: MainAxisAlignment.start,
//                         children: [
//                           Container(
//                             alignment: Alignment.center,
//                             width: 42,
//                             height: 42,
//                             decoration: const BoxDecoration(
//                               shape: BoxShape.circle,
//                               color: Color(0xff38ADB5),
//                             ),
//                             child: const Icon(
//                               Icons.add,
//                               color: Colors.white,
//                               size: 20,
//                             ),
//                           ),
//                           const SizedBox(width: 18),
//                           const Text(
//                             'More',
//                             style: TextStyle(
//                               fontSize: 16,
//                               fontWeight: FontWeight.w400,
//                               color: Colors.black,
//                             ),
//                           ),
//                         ],
//                       ),
//                     )
//                 ],
//               ),
//             ),
//             const SizedBox(height: 20),
//             InkWell(
//               onTap: () {
//                 submitFirestore(context);
//               },
//               child: Container(
//                 width: double.infinity,
//                 padding: const EdgeInsets.symmetric(vertical: 20),
//                 decoration: BoxDecoration(
//                   color: kViolet,
//                   borderRadius: BorderRadius.circular(24),
//                 ),
//                 child: isLoading ? const Center(child: CircularProgressIndicator()) : Row(
//                   mainAxisAlignment: MainAxisAlignment.center,
//                   crossAxisAlignment: CrossAxisAlignment.center,
//                   children: [
//                     Text(
//                       locale_.cont,
//                       textAlign: TextAlign.center,
//                       style: const TextStyle(
//                         color: kPrimary,
//                         fontSize: 17,
//                         fontWeight: FontWeight.w600,
//                       ),
//                     ),
//                   ],
//                 ),
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
//
//  /* Widget renderDriverLicense({required LicenseModel driver}) {
//     final suffix = driverSuffix[driver.position - 0];
//     return Padding(
//       padding: const EdgeInsets.only(bottom: 16),
//       child: Row(
//         children: [
//           Expanded(
//             child: Row(
//               children: [
//                 GestureDetector(
//                   onTap: () => driver.uploaded ? null : pickImageFromCamera(driver),
//                   child: Container(
//                     alignment: Alignment.center,
//                     width: 42,
//                     height: 42,
//                     decoration: BoxDecoration(
//                       shape: BoxShape.circle,
//                       color: driver.uploaded ? const Color(0xff09CB6E) : const Color(0xffFF8A35),
//                     ),
//                     child: Icon(
//                       driver.uploaded ? Icons.check : Icons.camera_alt_rounded,
//                       color: Colors.white,
//                       size: 20,
//                     ),
//                   ),
//                 ),
//                 const SizedBox(width: 18),
//                 Text(
//                   'Vehicle $suffix',
//                   style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w600, color: Colors.black),
//                 ),
//               ],
//             ),
//           ),
//         ],
//       ),
//     );
//   }*/
//
//   Widget renderInsuranceLicense({required Certificate driver}) {
//     final suffix = driverSuffix[driver.position - 1];
//     return Padding(
//       padding: const EdgeInsets.only(bottom: 16),
//       child: Row(
//         mainAxisSize: MainAxisSize.max,
//         mainAxisAlignment: MainAxisAlignment.start,
//         children: [
//           Expanded(
//             child: Row(
//               children: [
//                 GestureDetector(
//                   onTap: () => driver.uploaded ? null : pickImageFromCamera(driver),
//                   child: Container(
//                     alignment: Alignment.center,
//                     width: 42,
//                     height: 42,
//                     decoration: BoxDecoration(
//                       shape: BoxShape.circle,
//                       color: suffix == "A" ? Color(0xff09CB6E)
//                           : Color(0xffFF8A35),
//                     ),
//                     child: Icon(
//                       driver.uploaded || driver.insured
//                           ? Icons.check
//                           : Icons.camera_alt_rounded,
//                       color: Colors.white,
//                       size: 20,
//                     ),
//                   ),
//                 ),
//                 const SizedBox(width: 18),
//                 Text(
//                   'Vehicle $suffix',
//                   style: const TextStyle(
//                     fontSize: 16,
//                     fontWeight: FontWeight.w600,
//                     color: Colors.black,
//                   ),
//                 ),
//               ],
//             ),
//           ),
//
//           suffix == "A"  ? Row(
//             children: [
//               const Text(
//                 'I am the insured',
//                 style: TextStyle(
//                   fontSize: 10,
//                   fontWeight: FontWeight.w100,
//                   color: Color(0xff09CB6E),
//                 ),
//               ),
//               const SizedBox(
//                 width: 12,
//               ),
//               AppSwitch(
//                 isOn: driver.insured,
//                 customColor: const Color(0xff09CB6E),
//                 onTap: () {
//                   // setState(() {
//                   //   driver.insured = !driver.insured;
//                   // });
//                   final model = Certificate(
//                     position: driver.position,
//                     insured: !driver.insured,
//                     certUploaded: driver.certUploaded,
//                     logUploaded: driver.logUploaded,
//                     uploaded: driver.uploaded,
//                     idCardUploaded: driver.idCardUploaded,
//                   );
//
//                   final licenseList = ref
//                       .watch(certificateListProvider)
//                       .where((model) => model.position != driver.position)
//                       .toList();
//                   licenseList.add(model);
//                   licenseList.sort((a, b) => a.position.compareTo(b.position));
//                   ref.read(certificateListProvider.notifier).state = licenseList;
//                 },
//               ),
//             ],
//           ) : SizedBox(),
//         ],
//       ),
//     );
//   }
// }
//
//
//
// class Witness extends ConsumerStatefulWidget {
//   final  Function(VehicleModal?, String?, List<String>?) onSuccess;
//   final String? docUrl;
//
//   const Witness({
//     super.key,
//     required this.onSuccess,
//     required this.docUrl,
//   });
//
//   @override
//   _WitnessState createState() => _WitnessState();
// }
//
// class _WitnessState extends ConsumerState<Witness> {
//   List<WitnessDetail> licenses = [];
//
//   @override
//   void initState() {
//     super.initState();
//     licenses.add(WitnessDetail(position: 1)); // Initialize with one license
//   }
//
//   Future<void> pickImageFromCamera(WitnessDetail license) async {
//     final ImagePicker _picker = ImagePicker();
//     final XFile? photo = await _picker.pickImage(source: ImageSource.camera);
//     if (photo != null) {
//       setState(() {
//         license.uploaded = true;
//         license.imagePath = photo.path; // Ensure this is set correctly
//         print("Image picked: ${photo.path}"); // Add this line
//       });
//     }
//   }
//
//   void addNewLicense() {
//     var newLicense = WitnessDetail(position: ref.watch(witnessListProvider).length + 1);
//     // Update the provider's state with the new list including the new license
//     ref.read(witnessListProvider.notifier).state = [...ref.read(witnessListProvider), newLicense];
//   }
//
//   Future<void> finalizeSelection(context)async {
//     List<String> imagePathList = [];
//     // Assuming 'licenses' holds your LicenseModel items and each LicenseModel has an 'imagePath' field
//     for (var license in licenses) {
//       if (license.uploaded && license.imagePath != null) {
//         imagePathList.add(license.imagePath!); // Add each image path to the list
//       }
//     }
//     setState(() {
//       selectedWitness = imagePathList;
//     });
//     // Call onSuccess with the list of image paths
//     widget.onSuccess(vehicleModal, "docUrl", imagePathList);
//
//   }
//   List<String> selectedWitness = [];
//   Future<String?> uploadImageFile(String imagePath) async {
//     try {
//       // Unique file name for the image
//       String fileName = basename(imagePath);
//       // Reference to the Firebase Storage location
//       Reference ref = FirebaseStorage.instance.ref().child('uploads/$fileName');
//       // Upload process
//       UploadTask task = ref.putFile(File(imagePath));
//       // Wait for upload to complete
//       await task.whenComplete(() {});
//       // Get and return the download URL
//       String downloadUrl = await ref.getDownloadURL();
//       return downloadUrl;
//     } catch (e) {
//       print("Error uploading image: $e");
//       return null; // In case of error, return null
//     }
//   }
//   bool isLoading = false;
//   Future<List<String>> uploadImages(List<String> imagePaths) async {
//     List<String> downloadUrls = [];
//
//     for (String imagePath in imagePaths) {
//       String? downloadUrl = await uploadImageFile(imagePath);
//       if (downloadUrl != null) {
//         downloadUrls.add(downloadUrl);
//       }
//     }
//
//     return downloadUrls;
//   }
//
//   Future<void> submitFirestore(context) async {
//     setState(() {
//       isLoading = true;
//     });
//     await finalizeSelection(context);
//
//     // Upload images first and get their URLs
//     List<String> witnessUrls = await uploadImages(selectedWitness);
//
//     // Prepare your driver details data
//     List<Map<String, dynamic>> witnessDetailsList = witnessUrls.map((url) {
//       return {
//         "firstname": "",
//         "lastname": "",
//         "gender": "",
//         "IdCard" : "",
//         "phoneNumber" : "",
//         // Assuming you want to associate each URL with these details
//       };
//     }).toList();
//     // Prepare your claim data
//     Map<String, dynamic> claimData = {
//       "witnessDetail" : witnessDetailsList,
//       'selectedWitness': witnessUrls,
//     };
//
//     try {
//       // Assuming 'user' is a valid object with a 'mobilePhone' field
//       String documentId = user?.mobilePhone.toString() ?? 'defaultId'; // Provide a default ID or handle it differently
//       await FirebaseFirestore.instance.collection('newClaims').doc(documentId).update(claimData);
//       print('Claim submitted successfully: $claimData');
//       setState(() {
//         isLoading = false;
//         Navigator.pop(context);
//       });
//       // Handle successful submission, e.g., show a confirmation message or navigate
//     } catch (e) {
//       print('Error submitting claim: $e');
//       // Handle errors, e.g., show an error message
//     } finally {
//       setState(() {
//         isLoading = false;
//       });
//     }
//   }
//   @override
//   Widget build(BuildContext context) {
//     final locale_ = AppLocalizations.of(context)!;
//     licenses = ref.watch(witnessListProvider).toList();
//     return GestureDetector(
//       onTap: () => FocusScope.of(context).unfocus(),
//       child: Container(
//         width: MediaQuery.of(context).size.width,
//         padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 30),
//         decoration: BoxDecoration(
//           color: kPrimary,
//           borderRadius: BorderRadius.circular(20),
//         ),
//         child: Column(
//           mainAxisSize: MainAxisSize.min,
//           children: [
//             const Text(
//               'Add Witness',
//               textAlign: TextAlign.center,
//               style: TextStyle(fontSize: 22, fontWeight: FontWeight.w700),
//             ),
//             const SizedBox(
//               height: 20,
//             ),
//             SingleChildScrollView(
//               child: Column(
//                 children: [
//                   for (var license in licenses)
//                     renderDriverLicense(driver: license),
//                   if (licenses.length < 10) // Limit number of licenses
//                     GestureDetector(
//                       onTap: ref.watch(witnessListProvider).length >= 10
//                           ? null
//                           : () {
//                         // Add new Driver Details
//                         addNewLicense();
//                       },
//                       child: Row(
//                         mainAxisSize: MainAxisSize.max,
//                         mainAxisAlignment: MainAxisAlignment.start,
//                         children: [
//                           Container(
//                             alignment: Alignment.center,
//                             width: 42,
//                             height: 42,
//                             decoration: const BoxDecoration(
//                               shape: BoxShape.circle,
//                               color: Color(0xff38ADB5),
//                             ),
//                             child: const Icon(
//                               Icons.add,
//                               color: Colors.white,
//                               size: 20,
//                             ),
//                           ),
//                           const SizedBox(width: 18),
//                           const Text(
//                             'More',
//                             style: TextStyle(
//                               fontSize: 16,
//                               fontWeight: FontWeight.w400,
//                               color: Colors.black,
//                             ),
//                           ),
//                         ],
//                       ),
//                     )
//                 ],
//               ),
//             ),
//             const SizedBox(height: 20),
//             InkWell(
//               onTap: () {
//                 submitFirestore(context);
//               },
//               child: Container(
//                 width: double.infinity,
//                 padding: const EdgeInsets.symmetric(vertical: 20),
//                 decoration: BoxDecoration(
//                   color: kViolet,
//                   borderRadius: BorderRadius.circular(24),
//                 ),
//                 child: isLoading ? const Center(child: CircularProgressIndicator()) : Row(
//                   mainAxisAlignment: MainAxisAlignment.center,
//                   crossAxisAlignment: CrossAxisAlignment.center,
//                   children: [
//                     Text(
//                       locale_.cont,
//                       textAlign: TextAlign.center,
//                       style: const TextStyle(
//                         color: kPrimary,
//                         fontSize: 17,
//                         fontWeight: FontWeight.w600,
//                       ),
//                     ),
//                   ],
//                 ),
//               ),
//             ),
//           ],
//         ),
//       ),
//     );
//   }
//
//   Widget renderDriverLicense({required WitnessDetail driver}) {
//     final suffix = driverSuffix[driver.position - 1];
//     return Padding(
//       padding: const EdgeInsets.only(bottom: 16),
//       child: Row(
//         children: [
//           Expanded(
//             child: Row(
//               children: [
//                 GestureDetector(
//                   onTap: () => driver.uploaded ? null : pickImageFromCamera(driver),
//                   child: Container(
//                     alignment: Alignment.center,
//                     width: 42,
//                     height: 42,
//                     decoration: BoxDecoration(
//                       shape: BoxShape.circle,
//                       color: driver.uploaded ? const Color(0xff09CB6E) : const Color(0xffFF8A35),
//                     ),
//                     child: Icon(
//                       driver.uploaded ? Icons.check : Icons.camera_alt_rounded,
//                       color: Colors.white,
//                       size: 20,
//                     ),
//                   ),
//                 ),
//                 const SizedBox(width: 18),
//                 Text(
//                   'ID Card $suffix',
//                   style: const TextStyle(fontSize: 16, fontWeight: FontWeight.w600, color: Colors.black),
//                 ),
//               ],
//             ),
//           ),
//         ],
//       ),
//     );
//   }
// }
//
//
// class ClaimImagess extends ConsumerStatefulWidget {
//   final Function(List<String>, List<String>?) onSuccess;
//   final List<String> claimPhotos;
//   final bool isView;
//
//   const ClaimImagess({
//     super.key,
//     required this.onSuccess,
//     required this.claimPhotos,
//     this.isView = false,
//   });
//
//   @override
//   ClaimImagessState createState() => ClaimImagessState();
// }
//
// class ClaimImagessState extends ConsumerState<ClaimImagess> {
//   bool isLoading = false;
//   List<XFile> pickedImages = [];
//   ScrollController controller = ScrollController();
//
//   void scrollToEnd() async {
//     Future.delayed(const Duration(milliseconds: 500), () {
//       controller.jumpTo(controller.position.maxScrollExtent);
//     });
//   }
//
//   Future<void> handlePickImage() async {
//     if (isLoading) return;
//     final ImagePicker picker = ImagePicker();
//     final List<XFile>? images = await picker.pickMultiImage();
//     if (images != null && images.isNotEmpty) {
//       setState(() {
//         pickedImages.addAll(images);
//         // Here, instead of passing pickedImages (List<XFile>),
//         // we pass the paths of these images as both parameters.
//         // widget.onSuccess(
//         //     pickedImages.map((e) => e.path).toList(), // First list of image paths
//         //     pickedImages.map((e) => e.path).toList()  // Second parameter, also list of image paths
//         // );
//       });
//       scrollToEnd();
//     }
//   }
//
//   Future<void> handleCaptureImage() async {
//     if (isLoading) return;
//     final ImagePicker picker = ImagePicker();
//     final XFile? image = await picker.pickImage(source: ImageSource.camera);
//     if (image != null) {
//       setState(() {
//         pickedImages.add(image);
//       });
//       scrollToEnd();
//     }
//   }
//
//   void handleSubmit(context) {
//     if (isLoading) return;
//     widget.onSuccess(
//         pickedImages.map((e) => e.path).toList(), // First list of image paths
//         pickedImages.map((e) => e.path).toList(),);
//         Navigator.pop(context);
//   }
//
//
//   List<String> selectedWitness = [];
//   Future<String?> uploadImageFile(String imagePath) async {
//     try {
//       // Unique file name for the image
//       String fileName = basename(imagePath);
//       // Reference to the Firebase Storage location
//       Reference ref = FirebaseStorage.instance.ref().child('uploads/$fileName');
//       // Upload process
//       UploadTask task = ref.putFile(File(imagePath));
//       // Wait for upload to complete
//       await task.whenComplete(() {});
//       // Get and return the download URL
//       String downloadUrl = await ref.getDownloadURL();
//       return downloadUrl;
//     } catch (e) {
//       print("Error uploading image: $e");
//       return null; // In case of error, return null
//     }
//   }
//   Future<List<String>> uploadImages(List<String> imagePaths) async {
//     List<String> downloadUrls = [];
//
//     for (String imagePath in imagePaths) {
//       String? downloadUrl = await uploadImageFile(imagePath);
//       if (downloadUrl != null) {
//         downloadUrls.add(downloadUrl);
//       }
//     }
//
//     return downloadUrls;
//   }
//
//   Future<void> submitFirestore(BuildContext context) async {
//     setState(() {
//       isLoading = true;
//     });
//
//     // Convert pickedImages (List<XFile>) to List<String> containing file paths
//     List<String> imagePathList = pickedImages.map((xfile) => xfile.path).toList();
//
//     // Upload images first and get their URLs
//     List<String> photoUrls = await uploadImages(imagePathList);
//
//     // Prepare your claim data with the uploaded photo URLs
//     Map<String, dynamic> claimData = {
//       "claimPhotos": photoUrls,
//     };
//
//     try {
//       // Assuming 'user' is a valid object with a 'mobilePhone' field
//       String documentId = user?.mobilePhone.toString() ?? 'defaultId'; // Provide a default ID or handle it differently
//       await FirebaseFirestore.instance.collection('newClaims').doc(documentId).update(claimData); // Use 'set' for new document creation or 'update' for existing.
//       print('Claim submitted successfully: $claimData');
//       setState(() {
//         isLoading = false;
//       });
//       Navigator.pop(context); // Navigates back once everything is done.
//     } catch (e) {
//       print('Error submitting claim: $e');
//       // Handle errors, e.g., show an error message
//     } finally {
//       setState(() {
//         isLoading = false;
//       });
//     }
//   }
//
//   @override
//   void initState() {
//     super.initState();
//     // Initialize with existing claim photos if present
//     for (var path in widget.claimPhotos) {
//       pickedImages.add(XFile(path));
//     }
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     final locale_ = AppLocalizations.of(context)!;
//     return Container(
//       height: widget.isView ? 620 : 760,
//       width: MediaQuery.of(context).size.width,
//       padding: const EdgeInsets.symmetric(horizontal: 15, vertical: 30),
//       child: SingleChildScrollView(
//         controller: controller,
//         child: Column(
//           mainAxisSize: MainAxisSize.min,
//           children: [
//             Text(
//               widget.isView ? locale_.viewIV : locale_.uploadImg,
//               textAlign: TextAlign.center,
//               style: TextStyle(fontSize: 22, fontWeight: FontWeight.w700, color: kViolet),
//             ),
//             const SizedBox(height: 40),
//             if (!widget.isView)
//               buildImageOption(icon: Icons.camera_alt, text: locale_.camera, onTap: handleCaptureImage),
//             if (!widget.isView) const SizedBox(height: 10),
//             if (!widget.isView)
//               buildImageOption(icon: Icons.photo_library, text: locale_.pLibrary, onTap: handlePickImage),
//             const SizedBox(height: 20),
//             buildImageGrid(),
//             if (!widget.isView) buildContinueButton(locale_, context),
//             const SizedBox(height: 20),
//             buildCloseOrCancelButton(locale_, context),
//           ],
//         ),
//       ),
//     );
//   }
//
//   Widget buildImageOption({required IconData icon, required String text, required VoidCallback onTap}) {
//     return GestureDetector(
//       onTap: onTap,
//       child: Row(
//         children: [
//           Icon(icon, color: kViolet, size: 35),
//           const SizedBox(width: 23),
//           Text(text, style: TextStyle(fontSize: 15, color: kBlack)),
//         ],
//       ),
//     );
//   }
//
//   Widget buildImageGrid() {
//     return Container(
//       height: 200, // Adjust based on your design requirements
//       child: GridView.count(
//         crossAxisCount: 3,
//         crossAxisSpacing: 10,
//         mainAxisSpacing: 10,
//         children: pickedImages
//             .map((e) => ClipRRect(
//           borderRadius: BorderRadius.circular(8),
//           child: Image.file(File(e.path), fit: BoxFit.cover),
//         ))
//             .toList(),
//       ),
//     );
//   }
//
//   Widget buildContinueButton(AppLocalizations locale_, context) {
//     return InkWell(
//       onTap: (){
//         submitFirestore(context);
//         //handleSubmit(context);
//       },
//       child: Container(
//         width: double.infinity,
//         padding: const EdgeInsets.symmetric(vertical: 20),
//         decoration: BoxDecoration(color: kViolet, borderRadius: BorderRadius.circular(24)),
//         child: isLoading ? const Center(child: CircularProgressIndicator()) : Text(
//           locale_.cont,
//           textAlign: TextAlign.center,
//           style: const TextStyle(color: Colors.white, fontSize: 17, fontWeight: FontWeight.w600),
//         ),
//       ),
//     );
//   }
//
//   Widget buildCloseOrCancelButton(AppLocalizations locale_, context) {
//     return InkWell(
//       onTap: () => Navigator.of(context).pop(),
//       child: Container(
//         width: double.infinity,
//         padding: const EdgeInsets.symmetric(vertical: 20),
//         decoration: BoxDecoration(color: Colors.redAccent, borderRadius: BorderRadius.circular(24)),
//         child: Text(
//           widget.isView ? locale_.close : locale_.cancel,
//           textAlign: TextAlign.center,
//           style: const TextStyle(color: Colors.white, fontSize: 17, fontWeight: FontWeight.w600),
//         ),
//       ),
//     );
//   }
// }
//
//
//
//
// class AccidentDetailss extends ConsumerStatefulWidget {
//   final Function(DateTime, Map<String, dynamic>, String, String?) onSuccess;
//   final DateTime date;
//   final String description;
//   final Map<String, dynamic> location;
//   final bool isView;
//   const AccidentDetailss({
//     super.key,
//     required this.onSuccess,
//     required this.date,
//     required this.location,
//     required this.description,
//     this.isView = false,
//   });
//
//   @override
//   AccidentDetailssState createState() => AccidentDetailssState();
// }
//
// class AccidentDetailssState extends ConsumerState<AccidentDetailss> {
//   bool isLoading = false;
//   bool isSubmitted = false;
//   bool isLocated = false;
//   List<XFile> pickedImages = [];
//   DateTime? selectedDate;
//   bool isGettingLocation = false;
//   Map<String, dynamic> location = {};
//   String description = '', error = '';
//   LocationPermission? appPermission;
//
//   @override
//   void initState() {
//     setState(() {
//       selectedDate = widget.date;
//       location = widget.location;
//       description = widget.description;
//     });
//     super.initState();
//   }
//
//   Future<void> getUserLocation(context) async {
//     bool serviceEnabled;
//     LocationPermission permission;
//     serviceEnabled = await Geolocator.isLocationServiceEnabled();
//     if (!serviceEnabled) {
//       setState(() {
//         error = AppLocalizations.of(context)!.disabledLocation;
//       });
//       return;
//     }
//
//     permission = await Geolocator.checkPermission();
//     setState(() {
//       appPermission = permission;
//       isLocated = false;
//       error = "";
//     });
//     if (permission == LocationPermission.denied) {
//       permission = await Geolocator.requestPermission();
//       if (permission == LocationPermission.deniedForever) {
//         setState(() {
//           error = 'Location permissions are denied';
//         });
//         return;
//       }
//     } else if (permission == LocationPermission.deniedForever) {
//       return;
//     }
//     setState(() {
//       isGettingLocation = true;
//     });
//     Position d = await Geolocator.getCurrentPosition();
//     String placeName = await PlaceService.getPlaceName(d.latitude, d.longitude);
//     setState(() {
//       location = {
//         'name': placeName,
//         'latitude': d.latitude,
//         'longitude': d.longitude,
//       };
//       isGettingLocation = false;
//     });
//   }
//
//   // void handleSubmit(co) {
//   //   setState(() {
//   //     isSubmitted = true;
//   //     error = "";
//   //   });
//   //   if (isLoading || location.isEmpty || description.isEmpty) return;
//   //   widget.onSuccess(selectedDate!, location, description , "ok");
//   //   Navigator.pop(context);
//   // }
//
//   Future<DateTime?> selectDate(BuildContext context) async {
//     final DateTime now = DateTime.now();
//     final DateTime? selectedDate_ = await showDatePicker(
//       context: context,
//       initialDate: selectedDate!,
//       firstDate: DateTime(now.year - 100, now.month, now.day),
//       lastDate: DateTime(now.year, now.month, now.day),
//     );
//     return selectedDate_;
//   }
//
//   Future<TimeOfDay?> selectTime(BuildContext context) async {
//     final TimeOfDay? selectedTime = await showTimePicker(
//       context: context,
//       initialTime:
//       TimeOfDay(hour: selectedDate!.hour, minute: selectedDate!.minute),
//     );
//     return selectedTime;
//   }
//
//   @override
//   Widget build(BuildContext context) {
//     final locale_ = AppLocalizations.of(context)!;
//     return GestureDetector(
//       onTap: () {
//         FocusScope.of(context).unfocus();
//       },
//       child: Container(
//         height: widget.isView ? 600 : 660,
//         width: MediaQuery.sizeOf(context).width,
//         padding: const EdgeInsets.symmetric(
//           horizontal: 15,
//           vertical: 30,
//         ),
//         child: SingleChildScrollView(
//           child: Column(
//             mainAxisSize: MainAxisSize.min,
//             children: [
//               Text(
//                 locale_.accidentDetails,
//                 textAlign: TextAlign.center,
//                 style: const TextStyle(
//                   fontSize: 22,
//                   fontWeight: FontWeight.w700,
//                 ),
//               ),
//               const SizedBox(height: 32),
//               Row(
//                 children: [
//                   Expanded(
//                     child: AppTextFormField(
//                       label: locale_.date,
//                       readyOnly: true,
//                       controller: TextEditingController(
//                         text: formatDate(selectedDate!),
//                       ),
//                       onTap: () async {
//
//                       },
//                       suffixIcon: const Padding(
//                         padding: EdgeInsets.all(8.0),
//                         child: SvgIcon(path: 'assets/svg/v_calendar.svg'),
//                       ),
//                     ),
//                   ),
//                   const SizedBox(width: 14),
//                   Expanded(
//                     child: AppTextFormField(
//                       label: locale_.time,
//                       controller: TextEditingController(
//                         text: formatTime(selectedDate!),
//                       ),
//                       readyOnly: true,
//                       onTap: () async {
//                         if (widget.isView) return;
//                         var t = await selectTime(context);
//                         if (t != null) {
//                           final newT = DateTime(
//                             selectedDate!.year,
//                             selectedDate!.month,
//                             selectedDate!.day,
//                             t.hour,
//                             t.minute,
//                           );
//                           setState(() {
//                             selectedDate = newT;
//                           });
//                         }
//                       },
//                       suffixIcon: const Padding(
//                         padding: EdgeInsets.all(8.0),
//                         child: SvgIcon(path: 'assets/svg/time.svg'),
//                       ),
//                     ),
//                   ),
//                 ],
//               ),
//               const SizedBox(height: 18),
//               AppTextFormField(
//                 label: locale_.location,
//                 readyOnly: true,
//                 controller: TextEditingController(text: location['name'] ?? ''),
//                 error: location.isEmpty && isSubmitted,
//                 errorMessage: locale_.requiredLocation,
//                 suffixIcon: Padding(
//                   padding: const EdgeInsets.all(8),
//                   child: isGettingLocation
//                       ? const CircularProgressIndicator(
//                     color: kViolet,
//                   )
//                       : const SvgIcon(path: 'assets/svg/location.svg'),
//                 ),
//                 onTap: () async {
//                   if (widget.isView) return;
//                   await getUserLocation(context);
//                 },
//               ),
//               const SizedBox(height: 18),
//               AppTextFormField(
//                 label: locale_.accidentDescription,
//                 initialValue: description,
//                 readyOnly: widget.isView,
//                 labelAlignment: FloatingLabelAlignment.start,
//                 maxLine: 6,
//                 onChange: (value) {
//                   setState(() {
//                     description = value;
//                   });
//                 },
//                 error: description.isEmpty && isSubmitted,
//                 errorMessage: locale_.requiredDescription,
//               ),
//               Text(
//                 error,
//                 style: const TextStyle(
//                   color: kRed,
//                   fontSize: 13,
//                 ),
//               ),
//               const SizedBox(height: 10),
//               if (appPermission == LocationPermission.deniedForever)
//                 RichText(
//                   text: TextSpan(
//                     style: const TextStyle(
//                       color: kRed,
//                       fontSize: 9,
//                     ),
//                     children: [
//                       TextSpan(text: locale_.disabledLocation),
//                       TextSpan(
//                         text: locale_.enableLocation,
//                         style: const TextStyle(
//                           decoration: TextDecoration.underline,
//                         ),
//                         recognizer: TapGestureRecognizer()
//                           ..onTap = () {
//                             AppSettings.openAppSettings(
//                               type: AppSettingsType.location,
//                             );
//                           },
//                       ),
//                     ],
//                   ),
//                 ),
//               if (appPermission != null) const SizedBox(height: 20),
//               if (!widget.isView)
//                 InkWell(
//                   onTap: () {
//                     submitFirestore(context);
//                   },
//                   child: Container(
//                     width: double.infinity,
//                     padding: const EdgeInsets.symmetric(vertical: 20),
//                     decoration: BoxDecoration(
//                       color: kViolet,
//                       borderRadius: BorderRadius.circular(24),
//                     ),
//                     child: Row(
//                       mainAxisAlignment: MainAxisAlignment.center,
//                       crossAxisAlignment: CrossAxisAlignment.center,
//                       children: [
//                         Text(
//                           locale_.cont,
//                           textAlign: TextAlign.center,
//                           style: const TextStyle(
//                             color: kPrimary,
//                             fontSize: 17,
//                             fontWeight: FontWeight.w600,
//                           ),
//                         ),
//                         if (isLoading) ...[
//                           const SizedBox(width: 10),
//                           const SizedBox(
//                             height: 17,
//                             width: 17,
//                             child: CircularProgressIndicator(
//                               color: kPrimary,
//                               strokeWidth: 2,
//                             ),
//                           )
//                         ]
//                       ],
//                     ),
//                   ),
//                 ),
//               const SizedBox(height: 20),
//               InkWell(
//                 onTap: () {
//                   if (!isLoading) Navigator.pop(context);
//                 },
//                 child: Container(
//                   width: double.infinity,
//                   padding: const EdgeInsets.symmetric(vertical: 20),
//                   decoration: BoxDecoration(
//                     color: kViolet.withOpacity(widget.isView ? 1 : 0.4),
//                     borderRadius: BorderRadius.circular(24),
//                   ),
//                   child: Text(
//                     widget.isView ? locale_.close : locale_.cancel,
//                     textAlign: TextAlign.center,
//                     style: const TextStyle(
//                       color: Colors.white,
//                       fontSize: 17,
//                       fontWeight: FontWeight.w600,
//                     ),
//                   ),
//                 ),
//               )
//             ],
//           ),
//         ),
//       ),
//     );
//   }
//   Future<void> submitFirestore(BuildContext context) async {
//     setState(() {
//       isLoading = true;
//     });
//
//     Map<String, dynamic> claimData = {
//       "location": location,
//       "description" : description,
//     };
//
//     try {
//       // Assuming 'user' is a valid object with a 'mobilePhone' field
//       String documentId = user?.mobilePhone.toString() ?? 'defaultId'; // Provide a default ID or handle it differently
//       await FirebaseFirestore.instance.collection('newClaims').doc(documentId).update(claimData); // Use 'set' for new document creation or 'update' for existing.
//       print('Claim submitted successfully: $claimData');
//       setState(() {
//         isLoading = false;
//       });
//       Navigator.pop(context); // Navigates back once everything is done.
//     } catch (e) {
//       print('Error submitting claim: $e');
//       // Handle errors, e.g., show an error message
//     } finally {
//       setState(() {
//         isLoading = false;
//       });
//     }
//   }
// }
